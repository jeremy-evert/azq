#!/usr/bin/env bash
# azq â€” Ask ChatGPT from your terminal
# First draft CLI dispatcher

set -euo pipefail

# Ensure azq_env is active
if [ -f "./azq_env/bin/activate" ]; then
  source ./azq_env/bin/activate
fi

cmd="${1:-help}"

case "$cmd" in

  ask)
    shift
    echo "[azq] Asking ChatGPT with input: $*" 
    echo "---" >> logs/chatlog.md
    echo "USER: $*" >> logs/chatlog.md
    python - <<'PY'
from azq.openai_client import client
import sys, json

question = " ".join(sys.argv[1:])
resp = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[{"role": "user", "content": question}]
)

answer = resp.choices[0].message.content
print(answer)

# Append assistant reply to log
with open("logs/chatlog.md", "a") as f:
    f.write("ASSISTANT: " + answer.replace("\n", " ") + "\n")
PY
    ;;
  exec)
    echo "[azq] Executing staged commands (not implemented yet)"
    ;;




  # bin/azq (add to case statement)
  doc)
    shift
    topic="$1"
    mkdir -p logs/docs
    echo "[azq] Fetching doc for $topic"
    python - "$topic"<<'PY'
import pydoc, sys, pathlib
topic = sys.argv[1]
doc = pydoc.render_doc(topic, "Help on %s")
outpath = pathlib.Path("logs/docs") / f"{topic}.txt"
outpath.write_text(doc)
print(f"[azq] Doc for {topic} saved to {outpath}")
PY
    ;;



  import)
    shift
    convo_id="$1"
    outdir="logs/imported/$convo_id"
    mkdir -p "$outdir"
    echo "[azq] Importing conversation $convo_id"
    ./azq/import_convo.py "$convo_id" "$outdir"
    ;;
  help|--help|-h|"")
    echo "Usage: azq <command> [args]"
    echo "Commands:"
    echo "  ask    'question'   # Ask ChatGPT and log it"
    echo "  exec               # Run staged commands"
    echo "  import <url>       # Import conversation"
    ;;
  *)
    echo "[azq] Unknown command: $cmd"
    exit 1
    ;;
esac

